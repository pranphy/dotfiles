global  !p
import time
def get_header():
    date = time.strftime("%Y-%m-%d %H:%M")
    header = (
        "#!/usr/bin/env python3\n"
        "# -*- coding: utf-8 -*-\n"
        "# vim: ai ts=4 sts=4 et sw=4 ft=python\n"
         "\n"
        "# author : Prakash [प्रकाश]\n"
    )
    header += f"# date   : {date}"
    return header

def make_doc(snip):
	line = snip.buffer[snip.line-1]
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind(' ') + 1]
	snippet = snip.buffer[snip.line]

	if line.strip().startswith('def'):
		snip.buffer[snip.line] = ''
		line = line[:line.find('#')] # strip all the comments if there are
		paren_cont = line[line.find('(')+1:line.find(')')]
		params = paren_cont.split(',')
		id_params = []
		for param in params:
			if param.strip().startswith('self'):
				continue
			else:
				param = param.split('=')[0]
				id_params.append(param.strip())
		docstr = f'{old_spacing}"""${{1: This function does  something}}'
		j = 2
		param_doc = ''
		for param in id_params:
			param_doc += '\n'
			param_doc += f'{old_spacing}:type    {param}: ${{{j}:str}}\n'
			j += 1
			param_doc += f'{old_spacing}:param   {param}: ${{{j}:the string required for such}}\n'
			j += 1
		
		docstr += f'\n{param_doc}\n{old_spacing}"""'
		snip.expand_anon(docstr)
	elif line.strip().startswith('class'):
		snip.buffer[snip.line] = ''
		docstr = f'{old_spacing}"""${{1: This class does  something}}"""'
		snip.expand_anon(docstr)
	else:
		snip.expand_anon(' ')

endglobal

pre_expand "make_doc(snip)"
snippet indoc "Insert documentation" bA
$0
endsnippet

snippet class "Make a new python class " b
class ${1:ClassName}(${2:object}):
	def __init__(self):
		pass
endsnippet

snippet def "create a new function" b
def ${1:hunc_name}(${2:param}):
	${3:pass}
endsnippet

snippet pyhead "head" bA
`!p snip.rv = get_header()`
$0
endsnippet

snippet main "main block " bA
if __name__ == '__main__':
	$0
endsnippet

snippet try "Try / Except" bA
try:
	${1:pass}
except ${2:Exception}:
	${3:pass}
$0
endsnippet


snippet ( "bracket" iA
($1)
endsnippet

snippet [ "bracket" iA
[$1]
endsnippet
 
snippet { "bracket" iA
{$1}
endsnippet

snippet printf "Print string with formatting" i
print(f"$1")
$0
endsnippet


