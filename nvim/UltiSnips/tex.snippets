#priority -50
#extends texmath
global !p

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def nomath():
	return vim.eval('vimtex#syntax#in_mathzone()') != '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

def greek_symbols():
	sym = ['psi','phi','chi','tau','Tau','Chi','Phi','Psi']
	return sym

def math_funcs():
	return ['sin','cos','tan','csc','cot','ket','bra','bar','hat']

def greek_process(letter):
	greek = ['theta','beta','gamma','sigma','delta','pi','psi','lambda','phi','xi','tau','rho']
	if not letter.startswith('var') and letter.startswith('v'):
		letter = letter.replace('v','var')
	if letter in greek or letter.replace('var','') in greek:
		return '\\'+letter
	else:
		return letter

def create_taylor(snip):
	trm=int(match.group(1))
	rv = '1'
	sym = 'x'
	cnt = 1
	for i in range(1,trm+1):
		nr = f'{sym}^{i}'
		dr = f'{i}!'
		fr = f'\\frac{{${cnt}:{sym}^{i}}}{{${cnt+1}:{i}!}}'
		cnt+=1
		rv += '+'+fr
	snip.rv = rv+'\\ldots'

def create_matrix(snip):
	org = snip.buffer[snip.line]
	pvb  = (snip.buffer[snip.line]).strip()[0]
	rowss = snip.buffer[snip.line].split('x')[1]
	colss = snip.buffer[snip.line].split('x')[2]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rowss)
	cols = int_val(colss)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	old_spacing=''

	# this line clears the content of line
	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{"+pvb+"matrix}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{"+pvb+"matrix}\n$0"

	snip.expand_anon(final_str)

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{tabular}{|" + "|".join(['$' + str(i + 1) for i in range(cols)]) + "|}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

endglobal


priority 0
snippet head "Comment" iA
% Author : Prakash Gautam
% Date   : `date +%d-%m-%Y` `date +%H:%M:%S`
% vim: ai ts=4 sts=4 et sw=4 ft=tex
$0
endsnippet


# General latex stuffs
#==================================================
snippet template "Basic template" b
% Author : Prakash Gautam
% Date   : `date +%d-%m-%Y` `date +%H:%M:%S`
% vim: ai ts=4 sts=4 et sw=4 ft=tex
%
\documentclass[a4paper]{article}

\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{physics}
\usepackage{graphicx}

\author{Prakash Gautam}

\begin{document}
	$0
\end{document}
endsnippet

snippet "b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet


pre_expand "create_matrix(snip)"
snippet "([pvb])matrix(\d+)x(\d+)" "Generate a matrix" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet


snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	\includegraphics[width=${2:0.8}\linewidth]{${3:images/file-name.ext}}
	\caption{${4:`!p snip.rv=re.sub(r'[_/*\.\-]',' ',re.sub(r'(\w+)[/](.*)[\.](\w+)',r'\2',t[3])) `}}
	\label{fig:${3/\w+[\/](\w+)\.\w+/$1/}}
\end{figure}
$0
endsnippet

snippet twoFig "Two figures" b
\begin{figure}[t!]
	\centering
	\begin{subfigure}[t]{0.5\textwidth}
		\centering
		%\includegraphics[width=1.0\linewidth]{\curdir/images/img.jpg}
		\input{\curdir/images/onbb.tex}
		\caption{Caption }
		\label{fig:}
	\end{subfigure}%
	~
	\begin{subfigure}[t]{0.5\textwidth}
		\centering
		\input{images/inbb.tex}
		\caption{ }
		\label{fig:}
	\end{subfigure}
	\caption{.}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

context "env('itemze')"
snippet it "Individual item" eb
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}} \label{prt:${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}
$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}} \label{cha:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet

snippet sec "Section" b
\section{${1:section name}} \label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet

snippet sec* "Section" b
\section*{${1:section name}} \label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0}
endsnippet


snippet sub "Subsection" b
\subsection{${1:subsection name}} \label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet

snippet sub* "Subsection" b
\subsection*{${1:subsection name}} \label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0}
endsnippet

snippet ssub "Subsubsection" b
\subsubsection{${1:subsubsection name}} \label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet

snippet ssub* "Subsubsection" b
\subsubsection*{${1:subsubsection name}} \label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	${0}
endsnippet

snippet par "Paragraph" b
\paragraph{${1:paragraph name}} \label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet

snippet subp "Subparagraph" b
\subparagraph{${1:subparagraph name}} \label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
	$0
endsnippet


snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet


context "nomath()"
snippet align "align "  eb
\begin{align} \label{eq:${1:only}}
	$2
\end{align}
$0
endsnippet

snippet TEST "Dummy" iA
math   = `!p snip.rv=math()` nomath = `!p snip.rv=nomath()` comment = `!p snip.rv=comment()`
endsnippet


context "nomath()"
snippet alins "align"  eiA
\begin{align*}
	$1
\end{align*}
$0
endsnippet

snippet soln "solution" "nomath()" ebA
math   = `!p snip.rv=math()`
nomath = `!p snip.rv=nomath()`
\begin{solution}
	$1
\end{solution} $0
endsnippet


context "math()"
snippet cases "cases from ams math" ebA
\begin{cases}
	$1	& \text{ if } ${2:x \leq 0} \\\\
	$3	& \text{ if } ${4:\text{otherwise}}
\end{cases}
endsnippet


snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{minted}{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}$0
endsnippet

###################################################
############# Praksh Snippet start here ###########
###################################################

context "nomath()"
snippet "([0-9.]+)e(-?)([0-9]+) " "Scientific notation text"  eriA
`!p
base = match.group(1)
sign = match.group(2)
index = match.group(3)
snip.rv = r'$'+base+r' \times 10^{'+sign+index+r'}$'`
endsnippet

context "math()"
snippet "([0-9.]+)e(-?)([0-9]+) " "Scientific notation math"  eriA
`!p
base = match.group(1)
sign = match.group(2)
index = match.group(3)
snip.rv = base+r' \times 10^{'+sign+index+r'}'`
endsnippet

priority -1000

snippet ( "parenthesis ste " iA
($1)
endsnippet

snippet { "braces" iA
{$1}
endsnippet

snippet [ "brackets" iA
[$1]
endsnippet

context "nomath()"
snippet $ "inline math"  eiA
$$1$
endsnippet

context "nomath()"
snippet " "double quote"   eiA
\`\`$1"
endsnippet

priority 0


#==================================================
#================= Non Math Stuffs ================
#==================================================

#context "nomath()"
#snippet "\\(\w+) " "quick math in regular  mode"  erwA
#$`!p snip.rv = match.group(1)`$ $0
#endsnippet


#==================================================
#============== Common Math Stuffs ================
#==================================================

context "math()"
snippet int "integrate"  eiA
\int $0
endsnippet

context "math()"
snippet intl "integrate with limits "  eiA
\int\limits_{$1}^{$2} $0
endsnippet

context "math()"
snippet inff " integrate from -infty to infty "  eiA
\int\limits_{-\infty}^{\infty} $0
endsnippet

context "math()"
snippet inrff "integrate from + infty to - infty "  eiA
\int\limits_{\infty}^{-\infty} $0
endsnippet

context "math()"
snippet info "integrate from -infty to zero "  eiA
\int\limits_{-\infty}^{0} $0
endsnippet

context "math()"
snippet inof "interate fom zero to infty"  eiA
\int\limits_{0}^{\infty} $0
endsnippet

context "math()"
snippet inop "interate fom zero to pi"  eiA
\int\limits_{0}^{\pi} $0
endsnippet

context "math()"
snippet inpp "interate fom -pi to pi"  eiA
\int\limits_{-\pi}^{\pi} $0
endsnippet

context "math()"
snippet (( "left( right)"  eiA
\left( ${1:${VISUAL}} \right$0
endsnippet

context "math()"
snippet lr( "left( right)"  eiA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|"  eiA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}"  eiA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle"  eiA
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet frk "Fraction "  eiA
\frac{$1}{$2}
endsnippet

#snippet "(.+)/" "General Fraction "  erwA
#\\frac{`!p snip.rv=match.group(1)`}{$1}$0
#endsnippet

context "math()"
snippet "([\w\d\\\}\{\)\(_\^,+-=]+)/" "General Fraction "  erwA
\\frac{`!p snip.rv=match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet vec "vector "  eiA
\vec{$1}
endsnippet

context "math()"
snippet abs "vector "  eiA
\abs{$1}
endsnippet


context "math()"
snippet vop "vector "  ei
\vecop{$1}
endsnippet


context "math()"
snippet dot "dot over symbol"  ei
\dot{$1}
endsnippet

#==================================================
#========== Text Math Func & Stuffs ===============
#==================================================

context "math()"
snippet trc "Trace"  eiA
\mathrm{Tr}
endsnippet

context "math()"
snippet img "imaginary part of"  ei
\mathrm{Im}
endsnippet

#=========== Script Index and Stuffs ==============
#==================================================

context "math()"
snippet sts "Sub text"  eiA
_\\text\{\$1}
endsnippet

context "math()"
snippet ^^ "quick power "  eiA
^{$1}
endsnippet

context "math()"
snippet __ "quick sub "  eiA
_{$1}
endsnippet

context "math()"
snippet '([A-DF-Za-df-z]){1}(\d)' "auto subscript"  ewrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z]){1}_(\d\d)' "auto subscript2"  ewrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "square "  eiA
^{2}
endsnippet

context "math()"
snippet cb "Cube of the "  eiA
^{3}
endsnippet


context "math()"
snippet sb "Subscript "  eiA
_{$1}
endsnippet

context "math()"
snippet td "Power "  eiA
^{$1}$0
endsnippet

context "math()"
snippet inv "inverse"  eiA
^{-1}
endsnippet

priority 10
context "math()"
snippet "idx([0-9a-zA-Z])" "index superscript "  erA
^{(`!p snip.rv = match.group(1)`)}
endsnippet

priority 0
context "math()"
snippet rij "mrij"  ei
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet star "star"  eiA
^\star $0
endsnippet

context "math()"
snippet dag "dagger"  eiA
^\dagger
endsnippet



#==================================================
#=========== Operator     Stuffs ==================
#==================================================


context "math()"
snippet iff "iff"  eAi
\iff
endsnippet

context "math()"
snippet << "<<"  eiA
\ll
endsnippet

context "math()"
snippet >> ">>"  eiA
\gg
endsnippet

context "math()"
snippet -> "implies"  eAi
\rightarrow
endsnippet
context "math()"
snippet => "implies"  eAi
\implies
endsnippet

context "math()"
snippet ~ "~"  eiA
\sim $0
endsnippet

context "math()"
snippet <= "leq"  eiA
\leq $0
endsnippet


context "math()"
snippet ... "ldots"  eiA
\ldots
endsnippet

context "math()"
snippet ' "prime"  eiA
^{\prime}
endsnippet
context "math()"
#snippet pl "Plus sign inside math mode"  ieA
#+
#endsnippet


context "math()"
snippet pm "Plus sign inside math mode"  ieA
\pm $0
endsnippet

context "math()"
snippet +- "Plus sign inside math mode"  ieA
\pm $0
endsnippet

context "math()"
snippet -+ "Plus sign inside math mode"  ieA
\mp $0
endsnippet

context "math()"
snippet == "equals"  eiA
&=$1\\\\
$0
endsnippet

context "math()"
snippet != "equals"  eiA
\neq $0
endsnippet

context "math()"
snippet >= "geq"  eiA
\ge $0
endsnippet


context "math()"
snippet xx "times"  eiA
\times $0
endsnippet



#==================================================
#=========== Trigonometry and Stuffs ==============
#==================================================


# One parameter family of three letter function
context "math()"
snippet "([a-z]{3})(\w+) " "sine functions"  erA
`!p import os
key = match.group(1)
mtch = match.group(2)
if key in math_funcs():
	rval = '\\'+key+'{'+greek_process(mtch) + '}'
else:
	rval = '{}{} '.format(key,mtch)
snip.rv = rval`
endsnippet

context "math()"
snippet ln "log natural "  eiA
\ln $0
endsnippet

context "math()"
snippet log "log base 10"  eiA
\log $0
endsnippet

#==================================================
#=========== Calculus and Stuffs ==================
#==================================================


context "math()"
snippet ddx "d/dx"  ewA
\dv{${1:}}{x} $0
endsnippet

context "math()"
snippet ddt "d/dt"  ewA
\frac{d${1:}}{dt} $0
endsnippet


context "math()"
snippet exp "exponential"  ieA
\exp
endsnippet

context "math()"
snippet part "d/dx"  ew
\frac{\partial ${1:}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet pdv "partial derivative "  eiA
\pdv{$1}{$2} $0
endsnippet

context "math()"
snippet drv "derivative "  eiA
\dv{$1}{$2} $0
endsnippet

context "math()"
snippet tdr "second derivative "  eiA
\dv[2]{$1}{$2} $0
endsnippet

context "math()"
snippet tpd " second partial derivative "  eiA
\pdv[2]{$1}{$2} $0
endsnippet


context "math()"
snippet gpd " second partial derivative "  eiA
\pdv[${1:2}]{$2}{$3} $0
endsnippet


context "math()"
snippet lpcn "laplacian "  eiA
\pdv[2]{$1}{${2:x}} + \pdv[2]{$1}{${3:y}} $0
endsnippet

priority 1000
context "math()"
snippet "(\d)TY(\w) " "Comment"  rweA
`!p
trm=int(match.group(1))
sym = match.group(2)
rv = '1'
for i in range(1,trm+1):
	nr = f'{sym}^{i}'
	dr = f'{i}!'
	fr = f'\\frac{{{sym}^{i}}}{{{i}!}}'
	rv += '+'+fr
snip.rv = rv+'+ \\ldots'
`
endsnippet
priority 0


#==================================================
#=========== Common Physics Stuffs ================
#==================================================

context "math()"
snippet posb "poisson bracket"  ei
\posb{$1}{$2} $0
endsnippet

context "math()"
snippet ip "inner product"  eiA
\ip{$1}{${2:$1}}
endsnippet

context "math()"
snippet op "outer product"  eiA
\op{$1}{${2:$1}}
endsnippet


context "math()"
snippet mel "matrix element"  eiA
\mel{$1}{$2}{${3:$1}}$0
endsnippet

context "math()"
snippet nucl "Nucleus" iA
\nucl {$1}{$2}{$3} $0
endsnippet



context "math()"
snippet bra "bra QM"  eiA
\bra{$1}$0
endsnippet


context "math()"
snippet ket "ket QM"  eiA
\ket{$1}$0
endsnippet

context "math()"
snippet comm "commutator"  eiA
\comm{$1}{$2}
endsnippet

context "math()"
snippet acom "anti commutator"  eiA
\acomm{$1}{$2}
endsnippet

context "math()"
snippet set "set"  eiA
\\{$1\\}$0
endsnippet

context "math()"
snippet exv "expectation value"  eiA
\expval{$1}
endsnippet

context "math()"
snippet sqrt "square root"  eiA
\sqrt{$1}
endsnippet

context "math()"
snippet txt "text"  eiA
\text{$1}
endsnippet

context "math()"
snippet suml "sum with limits"  eiA
\sum\limits_{${1:n=1}}^{$2} $0
endsnippet

context "math()"
snippet prod "sum with limits"  eiA
\prod\limits_{${1:n=1}}^{$2} $0
endsnippet

context "math()"
snippet sumn "Sum over n"  eiA
\sum_n $0
endsnippet

context "math()"
snippet "mcl(\w)" "mathcal"  erA
\mathcal{`!p snip.rv = match.group(1).upper() `} $0
endsnippet

context "math()"
snippet "tld(\w)" "mathcal"  erA
\tilde{`!p snip.rv = match.group(1)`} $0
endsnippet

context "math()"
snippet "mbb(\w)" "mathbb"  erA
\mathbb{`!p snip.rv = match.group(1).upper() `} $0
endsnippet

#==================================================
#=========== Greek Symbols & Stuffs ===============
#==================================================

context "math()"
snippet oo "infinity "  eiA
\infty
endsnippet


context "math()"
snippet DD "delta"  eiA
\Delta $0
endsnippet

context "math()"
snippet nbl "nabla"  eiA
\nabla
endsnippet
#==================================================
#=========== Experimental Stuffs ==================
#==================================================

#context "math()"
#snippet '^.*\)/' "() frac"  ewrA
#`!p
#stripped = match.string[:-1]
#depth = 0
#i = len(stripped) - 1
#while True:
#	if stripped[i] == ')': depth += 1
#	if stripped[i] == '(': depth -= 1
#	if depth == 0: break;
#	i-=1
#snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
#`{$1}$0
#endsnippet


priority -105
context "math()"
snippet sympy "sympyblock " ew
sympy $1 sympy$0
endsnippet

priority -100
context "math()"
snippet 'sympy(.*)sympy' "sympy"  ewr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

#==================================================
#======= New Experimental Stuffs ==================
#==================================================

priority 100
context "nomath()"
snippet "pgls(\w+) " "Glossary entry"  wreA
\glspl{`!p snip.rv=match.group(1)`} $0
endsnippet

priority -100

context "nomath()"
snippet "gls(\w+) " "Glossary entry"  wreA
\gls{`!p snip.rv=match.group(1)`} $0
endsnippet

context "math()"
snippet  "Bold  text entry"  weA
\textbf{$1} $0
endsnippet

context "math()"
snippet "(\w+)" "Bold text entry"  wreA
\textbf{`!p snip.rv=match.group(1)`} $0
endsnippet

context "nomath()"
snippet ";(\w+) " "Quick inline math"  wreA
$`!p snip.rv=match.group(1)`$ $0
endsnippet


context "nomath()"
snippet ;; "Quick inline math"  weA
$${1}$ $0
endsnippet


context "nomath()"
snippet mm "Inline math mode"  weA
$$1$ $0
endsnippet


###################################
########## Beamer ##################

snippet sltc "Two columns slide" wA
\begin{frame}{${1:Title}}
	\begin{columns}
		\begin{column}{${2:0.49}\textwidth}
			% may be itemize here
		\end{column}
		\begin{column}{`!p snip.rv= '{:.2}'.format(0.98-float(t[2]))`\textwidth}
			%
		\end{column}
	\end{columns}
\end{frame}
$0
endsnippet



snippet sloc "Two columns slide" wA
\begin{frame}{${1:Title}}
	$1
\end{frame}
$0
endsnippet


########################################      SLIDE ##################
######################################################################

snippet igfx "Include graphics line" b
\includegraphics[width=${1:0.99}\linewidth]{${2:imagepath}}
$0
endsnippet

snippet onbb "Neutrinoless double beta decay" wA
$ 0\nu\beta\beta$
endsnippet


# vim:ft=snippets:

