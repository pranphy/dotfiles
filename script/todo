#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4 ft=python

# author : Prakash [प्रकाश]
# date   : 2021-09-09 01:06

todo = {
    'title':'this is title',
    'date': '2021-09-09',
    'comments': 'I have few things for you to do.\nThis might be a time to test',
    'topics': [
        {
            'name': 'Physics',
            'comments': '',
            'tasks': [
                    {
                        'id': '01',
                        'flag': 'done',
                        'added': 161162223,
                        'updated': 1611162224,
                        'task' : "Hello, there I need to work on this ",
                        'tags':['late','learn','through']
                    },
                    {
                        'id': '02',
                        'flag': 'pending',
                        'added': 161162223,
                        'updated': 1611162224,
                        'task' : "Hello I have done something to work on this ",
                        'tags':['late','learn','through']
                    },
            ],
        },
        {
            'name': 'Mathematics',
            'comments': '',
            'tasks': [
                {
                    'id': '03',
                    'flag': 'done',
                    'added': 161162223,
                    'updated': 1611162224,
                    'task' : "Clear Hello I need to work on this is that clear ",
                    'tags':['late','learn','through']
                },
                {
                    'id':'04',
                    'flag': 'done',
                    'added': 161162223,
                    'updated': 1611162224,
                    'task' : "This Hello I need to work on this ",
                    'tags':['late','learn','through']
                },
            ],
        }
    ],
}

import click
from enum import Enum, unique, auto

@unique
class RegStat(Enum):
    FMSTART  = auto()
    FMEND    = auto()
    FMREG    = auto()
    COMMENT  = auto()
    TOPIC    = auto()
    TASK     = auto()
    FILSTART = auto()

class Todo(object):
    _frontmatter = dict()
    _topiclist = list()
    _topic = dict()
    _tasklist = list()
    _gstatus = RegStat.FILSTART
    _filename = '/tmp/hellos.md'
    _id = 1
    def __init__(self,filename):
        self._filename = filename

    def add_fm(self,line):
        try:
            spl = line.split(':')
            key = spl[0]
            if key.upper() == 'DATE':
                val = dt.datetime.strptime(spl[1],'%Y-%m-%d')
                self._frontmatter[key] = val
            else:
                self._frontmatter[key] = spl[1]
        except Exception as e:
            print(f"There was a error {e}")


    def add_topic(self,line):
        if self._topic:
            self._topic['tasks'] : self._tasklist
            self._tasklist = list()
            self._topiclist.append(self._topic)
            self._topic = dict()

        topicname = line.lstrip('## ').strip()
        self._topic['name'] = topicname

    def add_task(self,line):
        task = dict()
        flag = line.startswith('- [x] ')
        taskstr = line.lstrip('- [x] ') if flag else line.lstrip('- [ ] ')
        task['id'] = self._id; self._id += 1
        task['flag'] = 'done' if flag else 'pend'
        task['added'] = 161162223
        task['updated'] = 161162223
        task['task'] = taskstr
        self._tasklist.append(task)



    def get_type(self,line):
        oline = line
        line = line.strip()
        if self._gstatus == RegStat.FILSTART:
            if (len(line) < 0 ):
                return 'empty'
            elif line == '---':
                self._gstatus = RegStat.FMSTART
                return 'fmstart'
            else:
                return 'error'
        elif self._gstatus in [RegStat.FMSTART, RegStat.FMREG]:
            spl = line.split(':')
            if len(spl) == 2:
                self.add_fm(oline)
                self._gstatus = RegStat.FMREG
                return 'fmkeyvalue'
            elif line.startswith('#'):
                self._gstatus = RegStat.FMREG
                return 'fmcomment'
            elif line == '---':
                self._gstatus = RegStat.COMMENT
                return 'fmend'
            elif len(line) < 1:
                return 'error fm'
            else:
                print(' Error hare ', end='')
                return 'error'
        elif self._gstatus in [RegStat.COMMENT]:
            if line.startswith('## '):
                self.add_topic(oline)
                self._gstatus = RegStat.TOPIC
                return 'topic'
            else:
                return 'comment'
        elif self._gstatus == RegStat.TOPIC:
            if (line.startswith('- [ ] ') or line.startswith('- [x] ') ):
                self.add_task(oline)
                return 'task'
            if (line.startswith('## ')):
                self.add_topic(oline)
                self._gstatus = RegStat.TOPIC
                return 'topic'
            else:
                return 'empty'
        else:
            return 'unknown'

    def save_to_md(tasks,filename):
        tmp = '/tmp/hello.md'
        with open(tmp,'w') as wf:
            wf.write(f"---\n"
                    f"title:{tasks['title']}\n"
                    f"date:{tasks['date']}\n"
                    "---\n")
            wf.write("\n\n")
            print(tasks['comments'],file=wf)
            wf.write("\n")
            topics = tasks['topics']
            for topic in topics:
                name = topic['name']
                print(f"## {name} ",file=wf)
                tasks = topic['tasks']
                for task in tasks:
                    added = task['added']
                    updated = task['updated']
                    tags = task["tags"]

                    mark = 'x' if task['flag'] == 'done' else ' '
                    print(f"  - [{mark}] {task['task']} #{task['added']} {task['updated']}",file=wf)
                wf.write("\n\n")


    def annotate_file(self,filename=None):
        filename = filename or self._filename
        with open(filename, 'r') as infile:
            for line in infile:
                typ = self.get_type(line)
                line = line.strip()
                typ = typ if typ is not None else 'None'
                print(f"{typ:>10}  : {line}")

        print(f"Now printing")
        print(f"Topic list is \n {self._topiclist}")




@click.command()
@click.argument("action",type=click.Choice(['add','done','delete','show']))
@click.argument("argument",default='all',type=str)
def main(action,argument):
    """Helps with things """
    filename = '/tmp/hello.md'
    TD = Todo(filename)
    print(f"Status is {TD._gstatus}")
    print(f"{action}ing {argument}")
    #save_to_md(todo,"hello")
    #tasks = read_from_md('/tmp/hello.md')
    TD.annotate_file()


if __name__ == '__main__':

    main()
