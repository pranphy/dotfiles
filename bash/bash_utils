#!/usr/bin/env bash
# vim: ai ts=4 sts=4 et sw=4 ft=sh

function LJlab()
{
    port=${2}
    if [[ "${port}" == '' ]]; then
        port="8181"
    fi

    fname=$(mktemp)
    jupyter lab --port=${port}> $fname 2>&1 &
    token=''
    while [[ "$token" == '' ]]
    do
        token=$(cat $fname | grep "localhost:${port}")
    done

    echo "Token :"${token}
}

function RootLs()
{
    fname=$1
    echo " now excuting the command"
    python -c 'import ROOT; TT=ROOT.TFile("'$fname'"); dt = TT.Get("dataTree"); dt.ls()'
}

function rep_string()
{
    if [[ ${1} == "-h" ]]
    then
        echo "RepString <path_to_files> <from_regex> <to_regex> <filewildcard>"
        echo "   replaces string in all file matching <filewildcard>  for  all"
        echo "   occurances of <from_regex> to <to_regex>. Use with caution as"
        echo "   it might damage files"
        return
    fi

    path=$1
    from=$2
    to=$3
    wildcard=$4

    cmd="find "${path}" -name '"${wildcard}"' -exec sed -i -e 's#"${from}"#"${to}"#g' {} ;"
    echo $cmd
    exec $cmd;
}

function PyCalc()
{
    python -c "print("$@")"
}

function jc()
{
    cmd='julia -E "'${@}'"'
    eval ${cmd}
}


function PyVersion()
{
    for pac in $@
    do
        python -c 'import '$pac' as pkg; print("'$pac' :: {} ".format(pkg.__version__))'
    done
}

function PipShow()
{
    pip="pip"$1
    echo "Listing packages for "$pip
    $pip list --format freeze|awk -F = {'print $1'}| xargs $pip show | grep -E 'Location:|Name:' | cut -d ' ' -f 2 | paste -d ' ' - - | awk '{print $2 "/" tolower($1)}' | xargs du -sh 2> /dev/null|sort -h
}


# Mount my disks by name "
function Mount()
{
    drive=$@
    for dr in $drive
    do
        if  [[ "${dr,,}" == "study"  ]]; then
            udisksctl mount -b  /dev/sda3
        elif [[ "${dr,,}" == "backup" ]]; then
            udisksctl mount -b  /dev/sda4
        else
            printf "Unknown parameter: $drive \n\tusage :: Mount disk_label1 [,disk_label2, ... ]\n"
        fi
    done
}


# UnMount my disks by name "
function UnMount()
{
    drive=$@
    for dr in $drive
    do
        if  [[ "${dr,,}" == "study"  ]]; then
            udisksctl unmount -b  /dev/sda3
        elif [[ "${dr,,}" == "backup" ]]; then
            udisksctl unmount -b  /dev/sda4
        else
            printf "Unknown parameter(s) $drive \n\t usage :: UnMount disk_label1 [,disk_label2, ... ]\n"
        fi
    done
}

function CreateGitRepo()
{
    name=$1
    desc=$2
    command='curl -u pranphy https://api.github.com/user/repos -d {"name":"'$name'"}'
    echo $command
    $command
}

function DelExcept()
{ cmd="find . -type f "
    for pattern in "$@"; do
        cmd=$cmd"-not -name '"$pattern"' "
    done
    #cmd=$cmd" | parallel rm"
    cmd=$cmd" -exec mv {} .Trash +"
    echo $cmd
    #$cmd

}

function MakeGrayscale()
{
    infil=${1}
    outfil=${2}
    gs \
    -sOutputFile=${outfil} \
    -sDEVICE=pdfwrite \
    -sColorConversionStrategy=Gray \
    -dProcessColorModel=/DeviceGray \
    -dCompatibilityLevel=1.4 \
    -dNOPAUSE \
    -dBATCH \
    ${infil}
}

function FetchLyrics()
{

    title=${@}
    [[ ${title} == "-h" ]] && echo "FetchLyrics <song title>, <artist>"
    artist=""
    IFS=',' read -ra ADDR <<< "${title}"
    title=${ADDR[0]}
    artist=${ADDR[1]}
    #echo "Artist : ${artist} and title: ${title}"

    curl -s --get "https://makeitpersonal.co/lyrics" --data-urlencode "artist=$artist" --data-urlencode "title=$title" | less
}


function ResetLocal()
{
    FNAME=${1}
    rm ${FNAME}
    git checkout ${FNAME}
}


function MakeDiary()
{
    path=$1
    date=$(date +%Y-%m-%d)
    date_AD=$(date +%Y.%m.%d)
    date_BS=$(nepaliconv -bs ${date_AD} -f 'y M d W' -u)
    touch $path/$date.md

cat > ${path}/${date}.md<< EOF
---
title: Diary@${date_AD}
date: ${date_BS} [${date}]
Author: Prakash [प्रकाश]
---

EOF
}


function MakeHW()
{
    CRN=${1}
    SUBJECT=${2}
    HWN=${3}


    HWDIR=HW${HWN}

    echo " Making files in " ${HWDIR}

    mkdir ${HWDIR}

cat > ${HWDIR}/PHYS${CRN}HW${HWN}.tex << EOF
% Autohr : Prakash Gautam
% Date   : `date +%d-%m-%Y` `date +%H:%M:%S`
\documentclass[10pt]{article}
\usepackage[margin=22mm]{geometry}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{physics}
\usepackage{pgmath}
%
\newcommand{\curdir}{.}
\newcommand\numberthis{\addtocounter{equation}{1}\tag{\theequation}}
\author{Prakash Gautam}
\title{PHYS ${CRN}: ${SUBJECT}\\\\ {\large Homework \#${HWN}}}
%\title{New title}

\begin{document}
    \maketitle
    \input{PHYS${CRN}HW${HWN}_Done.tex}
\end{document}
EOF

cat > ${HWDIR}/PHYS${CRN}HW${HWN}_Done.tex << EOF
\begin{questions}
\question [Book 1.1] %
    %
\end{questions}
EOF
}

function TimeAv()
{
    rm -f /tmp/mtime.$$

    for x in {1..10}
    do
      /usr/bin/time -f "real %e user %U sys %S" -a -o /tmp/mtime.$$ $@
      tail -1 /tmp/mtime.$$
    done

    awk '{ et += $2; ut += $4; st += $6; count++ } END {  printf "Average:\nreal %.3f user %.3f sys %.3f\n", et/count, ut/count, st/count }' /tmp/mtime.$$
}

function fed()
{
    help="Finds a file with fzf and opens with xdg-open"
    [[ ${1} == "-h"  || ${1} == "--help" ]] && echo ${help} && return 0

    given_path="$(readlink -f $(find . -type f | fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'))"
    root_path="${given_path}"
    if [[ -d ${root_path} ]]
    then
        cd ${root_path}
    else
        found=false
        while [[ ("${found}" == "false") && ("${root_path}" != "") ]]
        do
            root_path="$(dirname -- "$(readlink -f -- "$root_path")")"
            if [[ -d "${root_path}"/.git ]]
            then
                found=true
                pushd . &> /dev/null
                cd "${root_path}"
                #nvim "${given_path}"
                xdg-open "${given_path}"
                popd &> /dev/null
                return 0
            fi
        done
    fi
}

function correct_permission()
{
    find . -print0 | while IFS= read -r -d '' file
    do
        echo $file
        [[ -f "$file" ]] && chmod 664 "$file"
        [[ -d "$file" ]] && chmod 775 "$file"
    done
}

function cheat()
{
    CMD=${@}
    curl --silent cheat.sh/${CMD} | less -R
}

function vch()
{
    vi $(which ${1})
}


function sch()
{
    source $(which ${1})
}

function vsch()
{
    vi $(which ${1})
    source $(which ${1})
}

function weather()
{
    curl --silent wttr.in/$(curl --silent ifconfig.co/city)?m | less -R
}

function latexdoc()
{
    cachedir=${XDG_CACHE_DIR:-~/.cache}/texdoc
    mkdir -p ${cachedir}
    tempfile="${cachedir}/${1}.pdf"
    [[ ! -f ${tempfile} ]]  && curl "https://texdoc.org/serve/${@}/0" --output ${tempfile}
    zt ${tempfile}
}

function mkblog()
{
    dir=${1}
    shift 1
    param="${@}"
    touch ${dir}/$(date +%Y-%m-%d)-$(echo ${param} | tr A-Z a-z | tr ' ' -).md
}

function mkfblog()
{
    dir=${1}
    shift 1
    param="${@}"
    year=$(date +%Y)
    month=$(date +%m)
    day=$(date +%d)
    mkdir -p ${dir}/${year}/${month}
    touch ${dir}/${year}/${month}/$(echo ${param} | tr A-Z a-z | tr ' ' -).md
}

function crun()
{
    CXX=${CXX:-g++}
    [[ $1 ]]    || { echo "Missing operand" >&2; return 1; }
    [[ -r $1 ]] || { printf "File %s does not exist or is not readable\n" "$1" >&2; return 1; }
    local output_path=${TMPDIR:-/tmp}/${1##*/};
    ${CXX} -w -fmax-errors=1 -Wfatal-errors --std=c++20 "$1" -o "$output_path" && "$output_path";
    rm "$output_path";
    return 0;
}

function pdfpageext()
{
    # this function uses 3 arguments:
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
        -dFirstPage="${1}" \
        -dLastPage="${2}" \
        -sOutputFile="${3%.pdf}_p${1}-p${2}.pdf" \
        "${3}"
}

function ftpupload()
{
    #CONTENT=$(gpg --decrypt ~/.pgtm 2> /dev/null)
    USER=${1}
    PASS=${2}
    HOST=${3}
    LCD=${4}
    RCD=${5}

    FTPURL="ftp://$USER:$PASS@$HOST"
    #DELETE="--delete"

    lftp -c "set ftp:list-options -a;
    set ssl-allow false;
    open '$FTPURL';
    lcd $LCD;
    cd $RCD;
    mirror --only-newer --ignore-time --reverse $DELETE --verbose"
}

function csvshow()
{
    [[ $- != *i* ]] && return
    options="index=False"
    case ${1} in
    -h)
        echo "csvshow [-hl] <file.csv>"
        echo "file.csv  File path"
        echo " -h       Show this help and exit"
        echo " -l       Show LaTeX format "
        return 0
        ;;
    -l)
        options+=",tablefmt='latex'"
        shift 1
        ;;
    -s)
        options+=",tablefmt='plain'"
        shift 1
        ;;
    esac
     cmd='python3 -c "' # " start for the python -c
    cmd+='import pandas as pd;'
    cmd+='print(pd.read_csv('
    cmd+="'"    # Single quote to wrap csv path
    cmd+="${@}" # the file path
    cmd+="'"    # Single quote end to wrap csv path
    cmd+=")."   # read_csv close
    cmd+="to_markdown(${options}))"
    cmd+='"'
    eval ${cmd}
}

#Sort by size to display in list the files in the current directory, sorted by their size on disk.k
sbs() {
    du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

